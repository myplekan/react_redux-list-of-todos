{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","filterParams","filteredTodos","useMemo","filterTodos","preperedTodo","title","toLowerCase","preperedQuery","includes","completed","length","className","map","id","onClick","currentTodoActions","setTodo","TodoFilter","onSubmit","event","preventDefault","value","onChange","target","filterActions","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","useEffect","userId","catch","Error","href","email","name","App","data","todoActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8eae41fc.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","type SetQueryAction = {\n  type: 'filter/SET_QUERY';\n  payload: string;\n};\n\ntype RemoveQueryAction = {\n  type: 'filter/REMOVE_QUERY';\n};\n\ntype SetStatusAction = {\n  type: 'filter/SET_STATUS';\n  payload: string;\n};\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nconst removeQuery = (): RemoveQueryAction => ({ type: 'filter/REMOVE_QUERY' });\n\nconst setStatus = (status: string):SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\ntype State = {\n  query: string,\n  status: string,\n};\n\ntype Action = SetQueryAction | RemoveQueryAction | SetStatusAction;\n\nconst filterReducer = (\n  state: State = {\n    query: '',\n    status: 'all',\n  },\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return {\n        query: action.payload,\n        status: state.status,\n      };\n\n    case 'filter/REMOVE_QUERY':\n      return {\n        query: '',\n        status: state.status,\n      };\n\n    case 'filter/SET_STATUS':\n      return {\n        query: state.query,\n        status: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const actions = { setQuery, removeQuery, setStatus };\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype LoadAction = {\n  type: 'todos/LOAD',\n  payload: Todo[]\n};\n\nconst loadTodos = (todos: Todo[]): LoadAction => ({\n  type: 'todos/LOAD',\n  payload: todos,\n});\n\ntype Action = LoadAction;\n\nconst todosReducer = (todos: Todo[] = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todos/LOAD':\n      return action.payload;\n\n    default:\n      return todos;\n  }\n};\n\nexport const actions = { loadTodos };\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useMemo } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const filterParams = useAppSelector(state => state.filter);\n\n  const setTodo = (todo: Todo) => dispatch(currentTodoActions.setTodo(todo));\n\n  const filteredTodos = useMemo(() => {\n    const filterTodos = todos.filter(todo => {\n      const preperedTodo = todo.title.toLowerCase();\n      const preperedQuery = filterParams.query.toLowerCase();\n\n      return preperedTodo.includes(preperedQuery);\n    });\n\n    switch (filterParams.status) {\n      case 'all':\n        return filterTodos;\n      case 'active':\n        return filterTodos.filter(todo => todo.completed === false);\n      case 'completed':\n        return filterTodos.filter(todo => todo.completed === true);\n      default:\n        return filterTodos;\n    }\n  }, [todos, filterParams]);\n\n  return (\n    <>\n      {filteredTodos.length === 0 && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      {filteredTodos.length > 0 && (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {filteredTodos.map(todo => (\n              <tr data-cy=\"todo\" key={todo.id}>\n                <td className=\"is-vcentered\">{todo.id}</td>\n                {todo.completed\n                  ? (\n                    <td className=\"is-vcentered\">\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    </td>\n                  ) : (\n                    <td className=\"is-vcentered\" />\n                  )}\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p\n                    className={todo.completed\n                      ? 'has-text-success'\n                      : 'has-text-danger'}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => setTodo(todo)}\n                  >\n                    <span className=\"icon\">\n                      {currentTodo?.id === todo.id\n                        ? (<i className=\"far fa-eye-slash\" />\n                        ) : (\n                          <i className=\"far fa-eye\" />\n                        )}\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const filterParams = useAppSelector(state => state.filter);\n\n  const setQuery = (value: string) => dispatch(filterActions.setQuery(value));\n\n  const removeQuery = () => dispatch(filterActions.removeQuery());\n\n  const setStatus = (value: string) => dispatch(filterActions.setStatus(value));\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filterParams.status}\n            onChange={(event) => setStatus(event.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={filterParams.query}\n          onChange={(event) => setQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {filterParams.query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={removeQuery}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { User } from '../../types/User';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User>();\n\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const removeTodo = () => dispatch(currentTodoActions.removeTodo());\n\n  useEffect(() => {\n    if (currentTodo) {\n      getUser(currentTodo.userId)\n        .then(setUser)\n        .catch(() => new Error('Try again later'));\n    }\n  }, [currentTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user && (\n        <Loader />\n      )}\n\n      {user && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={removeTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo?.completed\n                ? (<strong className=\"has-text-success\">Done</strong>\n                ) : (\n                  <strong className=\"has-text-danger\">Planned</strong>\n                )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions as todoActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    getTodos()\n      .then(data => dispatch(todoActions.loadTodos(data)));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {!todos.length ? (\n                <Loader />\n              ) : (\n                <TodoList />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}